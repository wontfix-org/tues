#!/usr/bin/env python
# coding: utf-8

from __future__ import print_function, absolute_import

import os as _os
import functools as _ft
import getpass as _getpass

import sh as _sh
import click as _click
import fabric2.config as _config

import tues.fabric as _fabric


def get_hosts(provider, args):
    return [_.strip() for _ in _sh.Command("tues-provider-{}".format(provider))(*args)]


def prompt(failed, state={}):
    if failed:
        del state["pw"]
    if not "pw" in state:
        state["pw"] = _getpass.getpass(prompt="")
    return state["pw"]


def run(cxn, command, login, sudo=None, pty=None, files=None):
    if files is None:
        files = []

    env = {}

    for pos, file in enumerate(files, start=1):
        cxn.put(file)
        env["TUES_FILE{}".format(pos)] = _os.path.basename(file)

    if sudo is not None:
        run = _ft.partial(
            cxn.sudo,
            user=sudo,
            env=env,
        )
    else:
        run = cxn.run
    return run(command, pty=pty)


@_click.command()
@_click.option("-p", "--parallel", is_flag=True, help="Run commands in parallel")
@_click.option("-n", "--pool-size", type=int, default=10, help="Number of threads to execute commands on")
@_click.option("-u", "--user", type=unicode, help="The user to run the command a")
@_click.option("-l", "--login", envvar="USER", help="The user to login as")
@_click.option("-f", "--file", "files", multiple=True, type=_click.Path(exists=True, readable=True), help="File to copy to the remote server")
@_click.option("-t", "--no-pty", is_flag=True, help="Do not allocate a pseudo tty")
@_click.option("-w", "--warn-only", is_flag=True, help="Do not abort execution on errors, only issue warnings")
@_click.option("-v", "--verbose", is_flag=True, help="Enable verbose output")
@_click.argument("command")
@_click.argument("provider")
@_click.argument("provider_args", nargs=-1)
def cli(command, provider, provider_args, parallel, user, login, pool_size, files, no_pty, warn_only, verbose):
    config = _config.Config()
    hosts = get_hosts(provider, provider_args)

    if user != login:
        config.sudo.password = prompt

    if parallel:
        grouper = _ft.partial(_fabric.ThreadingGroup, *hosts, parallel=pool_size)
    else:
        grouper = _ft.partial(_fabric.SerialGroup, *hosts)

    group = grouper(config=config, user=login)
    group.call(
        run,
        command,
        login=login,
        sudo=user if user != login else None,
        pty=not no_pty,
        files=files,
    )


if __name__ == "__main__":
    cli() # pylint: disable=no-value-for-parameter
